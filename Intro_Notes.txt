Angular, single page application design framework. Library degil
React ise bir Js Library

Single page app ne demek, sayfalar arasinda gecis yaparken yada bulundugumuz sayfada bir degisiklik yaptigimizda, sayfa yeniden render edilmez. 

Angular ile gelistirilen uygulama, tamamen js ve html ile de gelisitirlebilir. ancak bu frameworkleri kullanmak bize moduler(yani birden cok yerde kullanilabilir) ve yeniden kullanilabilir bir kod yazmayi saglar. 

Google tarafindan gelistirildi.

1: Bir Js Framework udur.
2: Tamamen Frontend icindir.
3: Eger Database den herhangi bir veriye ihtiyac duyarsak, bu durumda bir api servisi kullanmamiz gerekir. Mesela bir banka yada film api si.


Angular docs da söyle yazar:

One framework;  Mobile and Desktop
yani bu framework ile hem mobile hemde desktop uygulamasi gelistirebiliriz. 

Mobile app gelistirebilmek icin NativeScript Framework kullanmak gerekir. 
NativeScript;    open source framework for building native mobile apps with Angular, Vue js, TypeScript  or Js

Alternatif olarak,  ionicframework ile de mobil app ler gelistirebiliriz. 

electron.js nedir?
Açık kaynaklı olan bu platformu kendi ifadeleriyle anlatacak olursak “Javascript, HTML ve CSS ile çapraz platform Masaüstü uygulamaları geliştir”. şeklinde bir kullanımı söz konusu. Peki nedir bu cümlenin özü ne anlama geliyor dediğinizi duyar gibiyim ya da ben kendim böyle bir soru sormuş olayım. Cevabını ise hepimizin kullandığı bir web uygulamasını Linux,Windows,MacOS yani tüm platformlara sunabiliriz. Javascript tabanlı bir yapı olduğunu belirtmiştik. Tabii ki bunun yanında React,Angular,JQuery,Vue gibi kütüphaneleri de kullanabilir ve geliştirme yapılabilir.




-------------------------------------------


Angular ile tamamen user in tarayicisinda calismak üzere bir app tasarlanir.

Ve sadece bir tane html sayfasi calisir. 
index.html dosyasi
ve bu html dosyasina baglanan Js dosyalarindan olusur.


Angular, tamamen dynamic tir. 
yani bir e commerce sitesi gelistirecegiz. ve backend den verilere ihtiyacimiz var.
Iste bu durumda django, node.js, asp.net yada baska bir dil ile gelistirilmis   bir backend den rest api vasitasi ile veri alip calisabilir. 


angular ile gelistirilmis masaüstü uygulamasi, user lara sanki mobil app kullaniyormus havasi verir. cünkü server dan yeni veriye ihtiyac oldugunda yeniden render olmaz. ve sayfa gecisleri cok hizli 



material angular sayfasinda, hazir component ler saglanir bizim icin. 


Type script nedir?


Angular kullanmak icin node.js kurulumu yapmak gerekir. cünkü npm script leri kullanacagiz. npm de;  node.js ile gelir. 


Kullanim icin;
ya cmd yada powershell kullanilir. yada vs code icindeki terminaller

node -v    (versiyon kontrol)

npm -v



Angular Project Kurulum:

1: docs da get started altinda setup.
    Bu kod, angular scriptlerinin global olarak pc mize yüklenmesini saglar. 
    npm install -g @angular/cli
    (paketi güncellemek istedigimizde, install yerine uninstall yazariz. silindikten sonra sifirdan yükleriz.)
    (npm install -g @angular/cli@12.1.3  komutu ile de istedigimiz spesific bir versiyonu yükleriz.)

2: browser da npm global list yazarsak;
    npm list -g --depth 0      bu kodu medium yazisindan aliriz.

    Bu kod bize pc mizde global de hangi paketlerin yüklü oldugunu gösterir. depth 0 dersek derinlik 0 olmus olur ve kolay bir görüntü saglar.

### ng --help komutu ile calistirabilecegimiz kodlari görürüz. ng new;  ng ile calisacak kodlardan bir tanesidir.

3: Create a workspace and initial application:
    ng new todoapp
(Bu kodu yazdigimizda, router sorusu ve css sorusu cikar. css sorusuna cevap vermek icin ok tuslari kullanilir.)


4: Projemiz todoapp klasörü icinde olustu. istersek cd komutu ile todoapp icine giris yapariz. yada todoapp klaösrünü tutup bos bir yere sürükleyebiliriz. Böylece vs code artik todoapp klasörü icinde calisir. 


5: ng serve dersek; tüm klasörler birlestirilerek proje calistirilir ancak daha sonrasinda biz projeyi kendimiz acariz. 
    Bunun yerine;
    ng serve -o   yada 
    ng serve --open    dersek,  kendisi hem projeyi baslatir hem de acar. 

    ## Bu kodlar ile bizim icin browser application bundles  olusturulur
    ## localhost 4200  



## app icindeki app.component.html icerigi silindiginde tarayici temiz ekran olur. 

### component yada dosya ekleyecegimiz zaman proje durdurulur

# proje dosyalarimizin hepsi src icinde yer alir. diger tüm dosyalar projenin ayarlari ile ilgili.

## app icinde bulunan html css ve iki adet ts dosyalari, app component ini olusturur.
## index.html icindeki <app-root></app-root>  bizim app component imizdir. 
bunun icerigi silinince hersey gider. 


## app klasörüne baktigimizda, 4 tane dosya ve birde modül görürüz. 
Biz bir app gelistirirken tüm kodlarimizi index.htm icerisine yazmayiz. cünkü kodlarimizin baska yerlerde de kullanilmasini isteriz. Bunun icin kodlarimizi tek bir parca halinde tutmak yerine, kücük kücük parcalara yani component lara böleriz. yani navbar imizi footer imiz bir component dir. 

## modül ise; component lari kapsayan seydir. bir app icindeki tüm component larimizi kapsar. ayrica angular tarafindan bize default olarak saglanmis ve bizim component lerimiz ile birlikte kullanilacak diger modüllerden de faydalanmak icin ve bunlari en etkili sekilde kullanmak icin, bir app icindeki tüm component lerimiz  ve angular tarafindan saglanan default modüller bir modül icinde yer alir. 
Bu kapsayici modül, bizim app imizi olusturur ve app isimle app imizde bu modulün adi AppModule dir.

Tüm bilesenlerimiz appModlü olusturur. appModul de uygulamamizin kendisidir. 

## Angular tarafindan saglanan default modüllere örnek;
1: NgModule  
2: FormsModule
3: RoutingModule

## Biz projemizi olustururken, bize soru sorar. routing modul istiyor musunuz diye. eger biz istersek, bu modul projemizin bir parcasi olur. degilse olmaz. eger inputlar ile calisacaksak da o zaman formsmodul ü ekleriz. 

## Genel projemizde ihtiyac oldugunda birden cok modul olusturabiliriz. mesela customerModul, adminModul. Ve projemizin hangi modul ile calismaya baslayacagini istedigimiz zaman degistirebiliriz. 

## bunun ayarlamsini main.ts icinde yapiyoruz. 
platformBrowserDynamic().bootstrapModule(AppModule)  
buradaki kod bize appModule ile baslayacagini söyler. 

### app imizin app.module.ts isimli ana bir moduleden olustugunu söylemistik. Bu modül icinde birden cok component olusturabiliriz. bu modül icinde olacak componentleri yazacagimiz yer app.module.ts dosyasidir. 
## app.component.ts isimli dosyada ise, app.componnet imizin icinde bulunacak alt component leri yazariz. 

## app icerisinde default olarak app.component.spec.ts dosyasi gelir. Bu dosya test asamasinda kullanilir. 


## Özet:
Bir proje icerisinde birden cok modüle olabilir. Bir modul icerisinde de birden cok component olabilir. 
# Ancak; modüllerden bir tanesini projemizin baslangic modülü olarak secmek durumundayiz.

Bunu nasil yapariz: 
main.ts icerisinde, modül ile ilgili bir böl+m vardir. Bu bölüme yazariz. 

## Ayni sekilde;  modül icerisindeki component lardan bir tanesini de baslangic component i olarak secmek durumundayiz.
# Bu nasil yapilir:
app klasörü icindeki app.module.ts icerisinde;  bu modül icerisinde olustuurmus oldugumuz tüm component lar declare edilir. bootstrap kisminda ise bu component lardan hangisinin baslangic component i olacagi belirtilir. 

# Önemli: ayni anda sadece tek bir component cagirilabilir. Ancak bit tüm component larimizin ayni anda cagirilmasini ve index.html de basilmasini isteriz. Bunun icin tüm component lar o modüle ait ana component da cagirilir. mesela app modülünde bu app component idir. index.html de de sadece app componnet basildiginda tüm component lar gelmis olur.  ayni react gibi. 

## index.html de component cagirmak icin bu component e ait selector kullanilir. 
## Birde bu component a ait templateUrl: './app.component.html',  kismi mevcuttur. Iste biz selector ile component i cagirdigimizda bu url de bulunan html icerigi return edilir. 
## bu component e css vermek icinde yine  app.component.css dosyasi kullanilir. 

## inspect yaptigimizda, html icindeki app-root component ini ve bunun iceriklerini görürüz. 

## Önemli:
component icindeki selector de . yada # kullanilmaz. Bu nedenle index.html de cagirma esnasinda react gibi component seklinde cagirilir.
## Eger biz . yada # kullanirsak; yani selector: '.app-root', seklinde tanimlama yaparsak bu durumda index.html de cagirma esnasinda <div class="app-root" ></div>
seklinde cagirmamiz gerekir. 

## component seklinde cagirdigimizda, inspect kisminda app-root isimli component görürüz. id yada class ile cagirdigimizda ise div olarak. 

## selector app-root olmak zorunda degil. isim de degisebilir. 

## Hatalarimizi console da görebiliyoruz. 





            ### bootstrap ekleme:

cdn kodu index.html icine yapistirilir. 
sonrasinda direkt olarak html kodlarinda class yazilarak kullanilir. 

## bootstrap download:
npm install bootstrap@5.0.2

## Bu kod dan sonra package.json icinde yer alir ve library de node modules e yerlesir.

## css dosyasinda kullanim: (bunu yapmazsak calismaz)
@import "~bootstrap/dist/css/bootstrap.css"
## bu yolun aynisini node modules de takip edebilirsin

#### Önemli:

## bootstrap import u app component icindeki css de de yapilabilir. yada tüm proje icin kullanmak istersek o zaman ana dizindeki css de kullanilir. 

## Cok Önemli:
## bootstrap in icindeki js leri kullanmak icin cdn kodunu normal yapistiririz ama bootstrap i download ettigimizde nasil kullaniriz?

## Bunun icin; 
angular.json dosyasi icinde architect kisminda söyle bir kod var:

        "styles": [
              "src/styles.css"
            ],
            "scripts": []

Buradaki kod da styles.css zaten default olarak var oldugundan bootstarp in css kodlarini eklemek icin icin ekstra birsey yapmiyoruz. yani css dosyasina import islemi yaptigimizda css kodlari direkt olarak calisir.
Ancak js kodlari kismi yani scripts kismi bostur. 
Bunun icin bu kod su sekilde yazilir. 
    "styles": [
              "src/styles.css"
            ],
            "scripts": [
                "node_modules/bootstrap/dist/js/bootstrap.min.js"
            ]

## Yukarida yazdigimiz gibi css kismi icin ekstra birsey yapmamiza gerek yok. ancak yine de yapmak istersek kodun tamami su sekilde olmali.

    "styles": [
              "src/styles.css",
              "node_modules/bootstrap/dist/css/bootstrap.min.css"
            ],
            "scripts": [
                "node_modules/bootstrap/dist/js/bootstrap.min.js"
            ]




## Not:  Bir component icindeki html ve css dosyalarini silerek, tüm islemler app.component.ts dosyasi icinde yapilabilir. css in component icinde yazimina örnek dosyada var. 







            #### New Component:  (Manuel yöntemle)
### Önemli:  app klasörü bizim modulümüzdür. Biz default olarak bunun icinde app component ine sahibiz. simdi ise ayni module icinde ikinci component imizi olusturucagiz. 

app klasörü icinde; 
1: todo.component.ts adinda dosya olusturulur. 
2: todo.component.html adinda dosya olusturulur. 
3: todo.component.css adinda dosya olusturulur. 

Bu dosyalarin icindeki kodlara bakabilirsin.

## export yazarken class ismi verirken, sonu Component seklinde bitmeli.

4: Bu islemlerden sonra;
app module icinde yeni component imizi tanimlariz.
yani app.module.ts dosyasi icinde declare kismina ikinci component olarak tanimlanir. 

5: Su an baslangic component i olarak app calisir. todo yu da calistirmak icin, todo component ine ait selector ile app component ine ait html dosyasi icinde todo da cagirilir. 
## inspect yapildiginda artik bu component da görülebilir. 

Not: todo da bir component oldugu icin istedigimiz yerde istedigimiz sayida cagirma islemi yapabiliriz.






            #### New Component with CLI:

## Not: bu sekilde ekleme yaptigimizda; app module icinde yeni bir klasör olusturur ve bu klasör icinde yeni component i olusturur. Ayrica module dosyasi icine yeni component imizi de otomatik larak ekler. 
yani todo component icinde 4 tane dosya otomatik olusur. Son olarak da update yapar.  UPDATE src/app/app.module.ts (393 bytes)

1: ng g c todo
(Burada ki g  generate  c  component  todo ise component ismidir.) 
Dolayisi ile bu kod yerine su kod da calistirilabilir:

    ng generate component todo 

## cli ile component eklemek bu kadar.
eger istersek simdi eskiden yüklü olan app component i silebiliriz. 
ve module dosyasi icindeki baslangic component ini de degistirebiliriz.

## Bu degistirildikten sonra; inspect kismina bakarsak, artik app component in yerini app-todo nun aldigini görürüz.

## index.html de cagrilmis olan component da degistirilmeli

## eger app compenent ini silmek istersek, app.module.ts kalmak zorundadir. 





























